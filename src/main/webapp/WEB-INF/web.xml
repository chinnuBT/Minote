<web-app xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	      http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>Minote</display-name>




	<servlet>
		<servlet-name>mvc-dispatcher</servlet-name>
		<servlet-class>
                        org.springframework.web.servlet.DispatcherServlet
                </servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>mvc-dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>


<!--  Commenting this out since Spring by default looks for [servlet-name]-servlet.xml under WEB-INF, can use this for scanning xml files in other directories
	<listener>
		<listener-class>
		
                   org.springframework.web.context.ContextLoaderListener
        </listener-class>
	</listener>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/mvc-dispatcher.xml</param-value>
	</context-param>
	--> 
	
		
	
	<resource-ref>
		 <description>Oracle Datasource</description>
		 <res-ref-name>jdbc/bhanuOracle</res-ref-name>
		 <res-type>javax.sql.DataSource</res-type>
		 <res-auth>Container</res-auth>
	</resource-ref>
	
</web-app>